# データを整える関数を記述
import sys
import shutil
import re
import Family

# 必要なファミリをリスト化
def arrange_list(family_list):
	with open('FamilyList.txt', 'r') as file:
		name = file.readline()
		num = file.readline()

		if name == '' or num == '':
			print('Family including 100 samples or more does NOT exist in \'FamilyList.txt\'.', file = sys.stderr)
			sys.exit(1)

		while int(num) >= 100:
			if name == '' or num == '':
				break

			# Genericを含むものは省く
			if not 'Generic' in name:
				fam = Family.family()
				fam.name = name.rstrip('\n')
				family_list.append(fam)

			name = file.readline()
			num = file.readline()

	return family_list

# 検体ファイルとfamilyインスタンスのリストを用いて、検体をファミリごとに割り当てる
def assign_samples(family_list, sample_file_name):
	# 検体のリストを読み込み
	with open(sample_file_name) as file:
		sample_list = file.read().splitlines()
		print(sample_file_name + ' loaded (number of samples : ' + str(len(sample_list)) + ')')
		print('(number of family_list : ' + str(len(family_list)) + ')')

	for i, sample_name in enumerate(sample_list):
		# 'sample_name' から正規表現に当てはまる部分を取り出す
		family_name = re.search(r"([a-zA-Z0-9-])+\.([a-zA-Z0-9])+\.([a-zA-Z0-9])+", sample_name).group()

		for fam in family_list:
			if fam.name == family_name:
				fam.samples.append(sample_name)
				print(fam.samples[-1] + '->' + fam.name)
				break

	for fam in family_list:
		fam.num = len(fam.samples)
		print(fam.name + ':' + str(fam.num))

	print('\n')
	print('Malware samples have assigned to family instances.')
	print('\n')

	return family_list

# 'sentX'を検体名に置換
def arrange_parvec(vec_file_name, sample_file_name):
	# バックアップの作成
	back_file = vec_file_name + '.bak'
	shutil.copy(vec_file_name, back_file)

	# 検体のリストを読み込み
	with open(sample_file_name) as file:
		sample_list = file.read().splitlines()
		print(sample_file_name + ' loaded')

	# vecファイルの読み込み
	with open(vec_file_name, 'r') as vfile:
		vec_lines = vfile.read()
		print(vec_file_name + ' loaded')

	sent_count = 0
	for name in sample_list:
		sent = 'sent_' + str(sent_count)
		if sent in vec_lines:
			vec_lines = vec_lines.replace(sent, name, 1)
			print('sent_' + str(sent_count) + 'replaced with' + name)

		sent_count += 1

	with open(vec_file_name, 'w') as file:
		file.write(vec_lines)

# modelのParagraph Vectorの値をファミリの属性に追加
def assign_parvec(family_list, model):
	for fam in family_list:
		for i in range(0, fam.num):
			tag = fam.name + '_' + str(i)
			data = tag
			for value in model.docvecs[tag]:
				data += ' ' + str(value)

			fam.par_vec.append(data)

	return family_list
			
	



# メインプログラム
import sys
import random
from copy import *
import glob
import re
import os
import shutil
import openpyxl
import numpy as np
from scipy.sparse import csr_matrix
import Update
import Arrange
import Family
import Check

import gensim
from gensim.models.doc2vec import Doc2Vec
from gensim.models.doc2vec import TaggedDocument

sys.path.append('C:\\Library\\libsvm-3.24\\python\\')
sys.path.append('C:\\Library\\libsvm-3.24\\tools\\')
from svm import *
from svmutil import *
from commonutil import *
from grid import *

CROSS_VAL_NUM = 4	# 分割交差検証の分割数
SAMPLING_DATASET_PATH = '.\\SamplingDataset'
DATASET_PATH = '.\\Dataset'

def data2vec(family_list):
	while True:
		answer = input('Update \'FamilyList.txt\' ?(y/n)')
		if answer == 'y' or answer == 'n':
			break
	# FamilyList.txtの作成
	if answer == 'y':
		Update.create_family_name_list()

	family_list = Arrange.arrange_list(family_list)		# Genericと100未満のファミリを省いてリスト化

	family_name_list = list()	# familyクラスのインスタンスの'name'をリスト化したもの
	print('family_name_list↓')
	for fam in family_list:
		print(fam.name)
		family_name_list.append(fam.name)
	print('\n')

	Update.create_dir(family_name_list, SAMPLING_DATASET_PATH)			# 作成されたリストから、ファミリのフォルダを作成する
	Update.create_dir(family_name_list, DATASET_PATH)

	while True:
		answer = input('Update Dataset list and \'SampleList.txt\' ?(y/n)')
		if answer == 'y' or answer == 'n':
			break

	# 使用する検体をリスト化したファイルを作成
	if answer == 'y':
		for name in family_name_list:
			if name == '' and is_empty == True:
				print('\'family_name_list\' is empty.', file = sys.stderr)
				sys.exit(1)
			else:
				is_empty = False

			name = DATASET_PATH + '\\' + name

			# ファミリのディレクトリ初期化	
			shutil.rmtree(name)
			os.mkdir(name)

		Update.create_API_call_file(family_name_list)

	family_list = Arrange.assign_samples(family_list, 'SampleList.txt')		# 検体をfamilyインスタンスに割り当て
	
	while True:
		answer = input('Update Paragraph Vector?(y/n)')
		if answer == 'y' or answer == 'n':
			break

	# Doc2Vecの処理
	if answer == 'y':	
		documents = []
		for fam in family_list:
			for index in range(0, fam.num):
				with open(DATASET_PATH + '\\' + fam.name + '\\' + str(index) +'.txt', 'r') as f:
					sentence = f.read()
				documents.append(TaggedDocument(words = sentence, tags = [fam.name + '_' + str(index)]))
		print('Documents have been created.')
		
		print('Calculating Paragraph Vector...')
		model = Doc2Vec(documents, dm=1, vector_size=100, window=5, min_count=1)
		model.save('doc2vec.model')
	else:
		model = Doc2Vec.load('doc2vec.model')

	#print(model.docvecs['Trojan.Win32.Waldek_0'])			# [value1 value2 value3 ... value100]
	#print(type(model.docvecs['Trojan.Win32.Waldek_0']))	# <class 'numpy.ndarray'>

	while True:
		answer = input('Doc2Vec has completed. Continue?(y/n)')
		if answer == 'y' or answer == 'n':
			break
	if answer == 'n':
		sys.exit(0)

	family_list = Arrange.assign_parvec(family_list, model)

	return family_list

def sampling_data(family_list):
	rate = len(family_list) - 1		# 1つのファミリとそれ以外のファミリの比率(例.ファミリが22種類→21:1の21を指す)
	print('rate : ' + str(rate) + ':1')

	# ファミリごとにデータセット作成
	for fam in family_list:
		# 以下で21n個のサンプルを取る場合のnを求める
		tmp_fam_list = deepcopy(family_list)	# コピー
		is_empty = False
		is_empty, tmp_fam_list = Check.check_more_rate(is_empty, rate, fam, tmp_fam_list)
		while(is_empty == False):
			fam.sampling_count += 1
			is_empty, tmp_fam_list = Check.check_more_rate(is_empty, rate, fam, tmp_fam_list)
		
		# k分割交差検証でkで割れる値にするため、(rate+1) * n = kの倍数の形にする
		while((rate + 1) * fam.sampling_count % CROSS_VAL_NUM != 0):
			fam.sampling_count -= 1

		n = fam.sampling_count
		print(fam.name)
		print( 'num:' + str(fam.num) + ' / rate:' + str(rate) + ' -> ' + 'sampling count : ' + str(fam.sampling_count))
		
		# 対象のファミリの検体をランダムに抽出
		index_list = random.sample(range(0, fam.num), rate * n)
		par_vec_list = []
		for index in index_list:
			par_vec_list.append(fam.par_vec[index])
		
		# 対象以外のファミリの検体をランダムに抽出
		for other in family_list:
			index_list = []
			if not fam.name == other.name:
				index_list = random.sample(range(0, other.num), n)
				for index in index_list:
					par_vec_list.append(other.par_vec[index])
					
		random.shuffle(par_vec_list)

		for i, name in enumerate(par_vec_list):
			path = SAMPLING_DATASET_PATH + '\\' + fam.name + '\\' + str(i) + '.txt'
			with open(path, 'w') as file:
				file.write(name)

	return family_list, rate
			

	"""
	# 例
	fam = Family.family()			# インスタンス作成
	fam.name = 'A.B.C'				# ファミリ名の代入
	fam.samples.append('A.B.C.D')	# リストに検体追加
	fam.samples.append('A.B.C.D.E')	# 〃
	fam.samples.append('A.B.C.F')	# 〃
	for line in fam.samples:		# 検体リストの表示
		print(line)
	"""

# サンプリングしたデータにラベル付けを行い、SVM学習を行う
def sendSVM(family_list, rate):
	# Excelファイルの書き込み準備
	wb = openpyxl.load_workbook('SVMResult.xlsx')
	sheet = wb['Sheet1']
	sheet_count = 3

	for fam in family_list:
		fam_path = SAMPLING_DATASET_PATH + '\\' + fam.name + '\\'
		train_path = fam_path + 'SVMData.train'
		if os.path.exists(train_path):
			os.remove(train_path)
		file_list = glob.glob(fam_path + '*.txt')

		for file_name in file_list:
			with open(file_name, 'r') as file:
				lines = file.read().split()	# 空白区切りでParagraph Vectorのデータ読み込み

			sample_name = lines.pop(0)
			family_name = re.search(r"([a-zA-Z0-9-])+\.([a-zA-Z0-9])+\.([a-zA-Z0-9])+", sample_name).group()

			# 判定したいファミリのデータなら1、そうでないなら-1のラベルを付加する
			if family_name == fam.name:
				t = 1
			else:
				t = -1

			lines_float = [float(s) for s in lines]		# 数値はfloat型に変換しておく
			fam.svm_data.append(lines_float)
			fam.svm_label.append(t)
		
		# スケーリング
		csr = csr_matrix(fam.svm_data)
		param = csr_find_scale_param(csr)
		csr = csr_scale(csr, param)
		svm_data = csr.toarray().tolist()

		with open(train_path, 'a') as data_file:
			for i, l in enumerate(svm_data):
				data_file.write(str(fam.svm_label[i]))
				for index, value in enumerate(l):
					data_file.write(' ' + str(index+1) + ':' + str(value))
				data_file.write('\n')

		print('↓↓↓' + fam.name + '↓↓↓')
		grid_result = find_parameters(train_path, ['-v', str(CROSS_VAL_NUM), '-out', train_path + '.out'])
		print('Result -> rate:{0}, cost:{1}, gamma:{2}'.format(str(grid_result[0]), str(grid_result[1]['c']), str(grid_result[1]['g'])))
		average = (int(grid_result[0] * 100)) / 100.0	# 小数点第3位以下を切り捨て
		'''
		all_num = (rate + 1) * fam.sampling_count

		result_list = []	# k分割交差検証のそれぞれの結果を格納し、最後にその平均を求める

		for set_i in range(0, CROSS_VAL_NUM):
			train_data = []
			test_data = []
			train_label = []
			test_label = []
			for i in range(0, all_num):
				# データの1/kを検証データ、k-1/kを教師データとする
				if i >= set_i/CROSS_VAL_NUM * all_num and i < (set_i + 1)/CROSS_VAL_NUM * all_num:
					test_data.append(fam.svm_data[i])
					test_label.append(fam.svm_label[i])
				else:
					train_data.append(fam.svm_data[i])
					train_label.append(fam.svm_label[i])
			
			# 以下、Libsvmによる計算
			prob = svm_problem(train_label, train_data)
			param = svm_parameter('-s 0 -c {0} -g {1}'.format(str(grid_result[1]['c']), str(grid_result[1]['g'])))

			m = svm_train(prob, param)
			result = svm_predict(test_label, test_data, m)

			result_list.append(result[1][0])
		
		# 交差検証により求めた結果から、平均を算出する
		average = sum(result_list)/len(result_list)
		average = (int(average * 100)) / 100.0	# 小数点第3位以下を切り捨て
		print(f'Average : {average}')
		'''
		# Excelファイルに書き込み
		cell_id = 'B' + str(sheet_count)
		sheet[cell_id] = average
		sheet_count += 1

	wb.save('SVMResult.xlsx')		

def main():
	family_list = list()			# 扱うべきファミリを格納するリスト
	family_list = data2vec(family_list)	# 2013～2016年のDatasetをParagraph Vectorに変換するまで

	family_list, rate = sampling_data(family_list)	# 学習器に通すデータセットを作成する

	sendSVM(family_list, rate)		# SVMへデータを送る

if __name__ == '__main__':
	main()
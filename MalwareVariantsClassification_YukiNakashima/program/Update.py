# ファイル等、データを更新する関数を記述
import json
import os
import re
import glob
import collections
import sys
import shutil
import Family

DATASET_PATH = '.\\Dataset'

# ファミリ名を昇順に並べたものを記述したファイルを作成する
def create_family_name_list():
	family_name_list = list()

	count_all = 0
	count_able = 0
	count = 0

	# 2013～2016年のDataset
	for year in range(2013, 2017):
		# ファイル読み込み、辞書の作成
		file_list = glob.glob('FFRI_Dataset_{}//*.json'.format(year))
		for i, name in enumerate(file_list):
			json_open = open(name, 'r')
			print('File Name :', name)

			count_all += 1

			try:
				json_load = json.load(json_open)
			except json.JSONDecodeError:
				json_open.close()
				continue

			# 'behaivior' 及び 'processes' が存在するかの確認
			try:
				processes_range = range(len(json_load['behavior']['processes']))
			except KeyError:
				json_open.close()
				continue

			# apiの確認
			is_api = False
			is_key = True
			for processes_i in processes_range:
				try:
					calls_range = range(len(json_load['behavior']['processes'][processes_i]['calls']))
				except KeyError:
					is_key = False
					break

				for calls_i in calls_range:
					if(json_load['behavior']['processes'][processes_i]['calls'][calls_i]['api']):
						is_api = True
						count_able += 1
						break

				if is_api == True:
					break

			if is_api == False:
				json_open.close()
				continue			

			# 'Kaspersky' の有無を確認
			try:
				sample_name = json_load['virustotal']['scans']['Kaspersky']['result']
			except KeyError:
				json_open.close()
				continue
			
			# 'sample_name' から正規表現に当てはまる部分を取り出す
			try:
				family_name = re.search(r"([a-zA-Z0-9-])+\.([a-zA-Z0-9])+\.([a-zA-Z0-9])+", sample_name).group()
			except:
				json_open.close()
				continue

			try:
				family_name_list.append(family_name)
			except AttributeError:
				continue

			count += 1

			json_open.close()

	# リストからファミリの検体数を集計し、昇順に並べる
	c = collections.Counter(family_name_list)
	sort_list = c.most_common()
	"""
	# 大文字と小文字を区別しない
	for i in range(0,len(sort_list)):
		for j in range(i+1,len(sort_list)):
			if sort_list[i][0].lower() == sort_list[j][0].lower():
				l_i = list(sort_list[i])
				l_j = list(sort_list[j])
				l_i[1] += l_j[1]
				l_j[1] = 0

				t_i = tuple(l_i)
				t_j = tuple(l_j)

				del sort_list[i]
				sort_list.insert(i,t_i)
				del sort_list[j]
				sort_list.insert(j,t_j)
	"""
	with open('FamilyList.txt', 'w') as family_file:
		for i in range(0,len(sort_list)):
			family_file.write(sort_list[i][0])
			family_file.write('\n')
			family_file.write(str(sort_list[i][1]))
			family_file.write('\n')

	print('Number of ALL Samples:', count_all)
	print('Number of Available Samples(API Call > 0):', count_able)
	print('Number of Counted Samples:', count)
	print('Updated \'FamilyList.txt\'')

# APIコール列のファイルを作成する
def create_API_call_file(family_name_list):
	count = 0
	sample_list_file = open('SampleList.txt', 'w')

	# 2013～2016年のDataset
	for year in range(2013, 2017):
		# ファイル読み込み、辞書の作成
		file_list = glob.glob('FFRI_Dataset_{}//*.json'.format(year))

		for i, name in enumerate(file_list):
			json_open = open(name, 'r')
			print('File Name :', name)

			try:
				json_load = json.load(json_open)
			except json.JSONDecodeError:
				json_open.close()
				continue

			# 'Kaspersky' の有無を確認
			try:
				sample_name = json_load['virustotal']['scans']['Kaspersky']['result']
			except KeyError:
				json_open.close()
				continue
			
			# 'family_name' が正規表現に当てはまるかを確認
			try:
				family_name = re.search(r"([a-zA-Z0-9-])+\.([a-zA-Z0-9])+\.([a-zA-Z0-9])+", sample_name).group()
			except:
				json_open.close()
				continue

			# family_name_listに存在しない検体については無視
			try:
				if not family_name in family_name_list:
					continue
				else:
					print(family_name)
			except AttributeError:
				continue

			# 'behaivior' 及び 'processes' が存在するかの確認
			try:
				processes_range = range(len(json_load['behavior']['processes']))
			except KeyError:
				json_open.close()
				continue

			# apiの確認
			is_api = False
			is_key = True
			for processes_i in processes_range:
				try:
					calls_range = range(len(json_load['behavior']['processes'][processes_i]['calls']))
				except KeyError:
					is_key = False
					break

				for calls_i in calls_range:
					if(json_load['behavior']['processes'][processes_i]['calls'][calls_i]['api']):
						is_api = True
						break

				if is_api == True:
					break					

			if is_key == False:
				json_open.close()
				continue

			if is_api == True:

				# ファイルにAPIコール名を書き込み
				write_lines = ''
				for processes_i in processes_range:
					calls_range = range(len(json_load['behavior']['processes'][processes_i]['calls']))
					for calls_i in calls_range:
						if(json_load['behavior']['processes'][processes_i]['calls'][calls_i]['api']):
							write_lines += json_load['behavior']['processes'][processes_i]['calls'][calls_i]['api']
							write_lines += ' '

				if not write_lines == '':
					file_list = glob.glob(DATASET_PATH + '\\' + family_name + '\\*.txt')
					with open(DATASET_PATH + '\\' + family_name + '\\' + str(len(file_list)) + '.txt', 'w') as API_call_file:
						API_call_file.write(write_lines[:-1])


				sample_list_file.write(sample_name + '\n')

				count += 1

				"""
				try:
					path = '.\\' + format(family_name) + '\\' + sample_name + '.txt'
				except:
					continue
				# 検体数が100以上のファミリでないとファイルパスのエラーが出る
				try:
					API_call_file = open(path, 'w')
				except:
					continue

				# ファイルにAPIコール名、引数名、引数値を書き込み
				for processes_i in processes_range:
					calls_range = range(len(json_load['behavior']['processes'][processes_i]['calls']))
					for calls_i in calls_range:
						if(json_load['behavior']['processes'][processes_i]['calls'][calls_i]['api']):
							arg_range = range(len(json_load['behavior']['processes'][processes_i]['calls'][calls_i]['arguments']))
							API_call_file.write(json_load['behavior']['processes'][processes_i]['calls'][calls_i]['api'])
							API_call_file.write(' ')
							for arg_i in arg_range:
								API_call_file.write(json_load['behavior']['processes'][processes_i]['calls'][calls_i]['arguments'][arg_i]['name'])
								API_call_file.write(' ')
								if not json_load['behavior']['processes'][processes_i]['calls'][calls_i]['arguments'][arg_i]['value'] is None:
									API_call_file.write(json_load['behavior']['processes'][processes_i]['calls'][calls_i]['arguments'][arg_i]['value'])
									API_call_file.write(' ')
								else:
									API_call_file.write('NULL')
									API_call_file.write(' ')

				API_call_file.close()
				"""

			json_open.close()

	sample_list_file.close()
	print('\n')
	print('Number of Counted Samples:', count)
	print('Updated \'APICallSeq.txt\' and \'SampleList.txt\'\n')

# 与えられたリストから、その名前のフォルダを作成する
def create_dir(family_name_list, dir = '.'):
	is_empty = True

	for name in family_name_list:
		if name == '' and is_empty == True:
			print('\'family_name_list\' is empty.', file = sys.stderr)
			sys.exit(1)
		else:
			is_empty = False

		name = dir + '\\' + name

		# ファミリのディレクトリ作成(初期化)
		if not os.path.exists(name):
			os.mkdir(name)			
